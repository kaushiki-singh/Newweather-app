{"version":3,"sources":["components/cityInput/index.js","components/cityWeather/index.js","App.js","reportWebVitals.js","index.js"],"names":["CityInput","city","setCity","fetchCityWeather","React","useState","error","setError","Container","Form","Group","controlId","Label","Control","value","type","placeholder","onChange","event","target","className","Button","variant","onClick","CityWeather","props","cityWeather","cod","name","Math","round","main","temp","weather","description","App","setCityWeather","fetch","then","res","json","result","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAkDeA,EA/CG,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,iBAAsB,EAE3BC,IAAMC,SAAS,IAFY,mBAE9CC,EAF8C,KAEvCC,EAFuC,KAwBrD,OACI,cAACC,EAAA,EAAD,UACA,eAACC,EAAA,EAAD,WACN,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,UACE,cAACF,EAAA,EAAKG,MAAN,mBACA,cAACH,EAAA,EAAKI,QAAN,CACAC,MAASb,EACRc,KAAK,OACLC,YAAY,aACZC,SA7BuB,SAACC,GACrBhB,EAAQgB,EAAMC,OAAOL,UA8BvB,mBAAGM,UAAU,cAAb,SAA4Bd,OAIhC,cAACe,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QA9BL,WAEXtB,GAMAM,EAAS,IACTJ,KALDI,EAAS,6BA0BlB,0BC1BaiB,EAdK,SAACC,GACjB,OACI,eAACjB,EAAA,EAAD,WACI,uBAC0B,MAA1BiB,EAAMC,YAAYC,IACnB,gCAAK,4BAAG,iCAASF,EAAMC,YAAYE,SACnC,gDACK,iCAASC,KAAKC,MAAML,EAAMC,YAAYK,KAAKC,QADhD,oBAEwBP,EAAMC,YAAYO,QAAQ,GAAGC,kBAC5C,S,MCoBLC,MAzBf,WAAgB,IAAD,EACW/B,IAAMC,SAAS,IAD1B,mBACNJ,EADM,KACAC,EADA,OAEyBE,IAAMC,SAAS,IAFxC,mBAENqB,EAFM,KAEOU,EAFP,KAab,OACA,qCACA,cAAC,EAAD,CACAnC,KAAMA,EACNC,QAASA,EACTC,iBAfyB,WACvBkC,MAAM,oDAAD,OAAqDpC,EAArD,4CACJqC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAI,aAAcF,GAC1BL,EAAeK,SAWnB,cAAC,EAAD,CACAf,YAAaA,QCdAkB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4769175b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Form, Button, Container} from \"react-bootstrap\";\r\n\r\nconst CityInput = ({city, setCity, fetchCityWeather}) => {\r\n    // const [city, setCity] = React.useState(\"\");\r\n    const [error, setError] = React.useState(\"\");\r\n\r\n    const handleInputChange=(event)=>{\r\n        setCity(event.target.value);\r\n\r\n    };\r\n\r\n    const handleSubmit=()=>{\r\n        //if city is empty\r\n        if(!city){\r\n            // alert(\"Field is empty\");\r\n           setError(\"City should not be empty\");\r\n        }\r\n        //otherwise making an API call with setting the error as empty now\r\n        else{\r\n            setError(\"\");\r\n            fetchCityWeather();\r\n            \r\n          \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n        <Form>\r\n  <Form.Group controlId=\"formBasicEmail\">\r\n    <Form.Label>City</Form.Label>\r\n    <Form.Control\r\n    value = {city}\r\n     type=\"text\"\r\n     placeholder=\"Enter city\"\r\n     onChange={handleInputChange}\r\n      />\r\n      <p className=\"text-danger\">{error}</p>\r\n    \r\n  </Form.Group>\r\n\r\n  <Button variant=\"primary\" onClick={handleSubmit} >\r\n    Submit\r\n  </Button>\r\n</Form>\r\n</Container>\r\n    );\r\n};\r\n\r\nexport default CityInput;","import React from 'react';\r\nimport {Container, Row, Col} from \"react-bootstrap\";\r\nconst CityWeather = (props) => {\r\n    return (\r\n        <Container>\r\n            <br/>\r\n           {props.cityWeather.cod === 200 ?\r\n           <div><p><strong>{props.cityWeather.name}</strong></p>\r\n           <p>It is currently\r\n                <strong>{Math.round(props.cityWeather.main.temp)}</strong>\r\n                 degrees out with {props.cityWeather.weather[0].description}</p>\r\n           </div> : null }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CityWeather;","import React from 'react';\nimport CityInput from './components/cityInput';\nimport CityWeather from './components/cityWeather';\n\nimport './App.css';\n\nfunction App() {\n  const [city, setCity] = React.useState(\"\");\n  const [cityWeather, setCityWeather] = React.useState({});\n  const fetchCityWeather = ()=> {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=ce2fb5a45dbb2f9c94ca6c8e1896aff7`)\n    .then((res) => res.json())\n    .then((result)=>{\n      console.log(\"result id \", result);\n      setCityWeather(result);\n    })\n  };\n\n \n  return ( \n  <>\n  <CityInput \n  city={city} \n  setCity={setCity} \n  fetchCityWeather={fetchCityWeather}/>\n  <CityWeather\n  cityWeather={cityWeather} />\n  </>\n  );\n}\n\nexport default App;\n\n// <Router>\n//     <div style={{display: \"flex\", justifyContent: \"space-evenly\" }}>\n//       <Link to=\"/\">Home</Link>\n//       <Link to=\"/about\">About</Link>\n      \n//     </div>\n//     <Switch>\n\n    \n//     <Route path=\"/\" exact>\n//         <Home />\n//       </Route>\n\n//     <Route path=\"/about\" exact>\n//         <About />\n//       </Route>\n\n\n//     </Switch>\n//     </Router>\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}